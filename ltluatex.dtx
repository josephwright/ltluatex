% \iffalse meta-comment
%
% Copyright 2015
% The LaTeX3 Project and any individual authors listed elsewhere
% in this file.
%
% It may be distributed and/or modified under the conditions of
% the LaTeX Project Public License (LPPL), either version 1.3c of
% this license or (at your option) any later version.  The latest
% version of this license is in the file:
%
%   http://www.latex-project.org/lppl.txt
%
%<*driver>
% \fi
\ProvidesFile{ltluatex.dtx}
  [0000/00/00 v1.0a LaTeX Kernel (LuaTeX support)]
% \iffalse
\documentclass{ltxdoc}
\GetFileInfo{ltluatex.dtx}
\begin{document}
\title{\filename\\(Lua\TeX{}-specific support)}
\author{David Carlisle and Joseph Wright\footnote{Significant portions
  of the code here are adapted/simplified from the packages \textsf{luatex} and
  \textsf{luatexbase} written by Heiko Oberdiek, \'{E}lie Roux,
  Manuel P\'{e}gouri\'{e}-Gonnar and Philipp Gesang.}}
\date{\filedate}
\maketitle
\DocInput{\filename}
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \section{Overview}
%
% Lua\TeX{} adds a number of engine-specific functions to \TeX{}. Several of
% these require set up that is best done in the kernel or need related support
% functions. This file provides \emph{basic} support for Lua\TeX{} at the
% \LaTeXe{} kernel level.
%
% This file contains code for both \TeX{} (to be stored as part of the format)
% and Lua (to be loaded at the start of each job). In the Lua code, the kernel
% uses the namespace |latex| which is \emph{reserved for use by the team}.
%
% The following |\count| registers are used here for register allocation:
% \begin{itemize}
%  \item[\texttt{258}] Attributes
%  \item[\texttt{259}] Category code tables
%  \item[\texttt{260}] Lua functions
%  \item[\texttt{261}] User whatsits
% \end{itemize}
% (|\count256| is used for |\newmarks| allocation and |\count257|
% is used for\break
% |\newXeTeXintercharclass| with Xe\TeX{}, with code defined in
% \texttt{ltfinal.dtx}).
% With any \LaTeXe{} kernel from 2015 onward these registers are part of
% the block in the extended area reserved by the kernel (prior to 2015 the
% \LaTeXe{} kernel did not provide any functionality for the extended
% allocation area).
%
% \section{\TeX{} functionality}
%
% \DescribeMacro{\newattribute}
% |\newattribute{|\meta{attribute}|}|\\
% Defines a named \cs{attribute}, indexed from~$1$
% (\emph{i.e.}~|\attribute0| is never defined). Attributes intially
% have the marker value |-"7FFFFFFF| (`unset') set by the engine.
%
% \noindent
% \DescribeMacro{\newcatcodetable}
% |\newcatcodetable{|\meta{catcodetable}|}|\\
% Defines a named \cs{catcodetable}, indexed from~$1$
% (|\catcodetable0| is never assigned). A new catcode table will be
% populated with exactly those values assigned by Ini\TeX{} (as described
% in the Lua\TeX{} manual).
%
% \noindent
% \DescribeMacro{\newluafunction}
% |\newluafunction{|\meta{function}|}|\\
% Defines a named \cs{luafunction}, indexed from~$1$ (Lua indexes from
% $1$ so |\luafunction0| is not available).
%
% \noindent
% \DescribeMacro{\newwhatsit}
% |\newwhatsit{|\meta{whatsit}|}|\\
% Defines a custom \cs{whatsit}, indexed from~$1$.
%
% \DescribeMacro{\catcodetable@initex}
% \DescribeMacro{\catcodetable@string}
% \DescribeMacro{\catcodetable@latex}
% \DescribeMacro{\catcodetable@atletter}
% Predefined category code tables with the obvious assingments. Note
% that the |latex| and |atletter| tables set the full Unicode range
% to the codes predefined by the kernel.
%
% \section{Lua functionality}
%
% \begingroup
%
% \begingroup\lccode`~=`_
% \lowercase{\endgroup\let~}_
% \catcode`_=12
%
% \section{Allocators in Lua}
%
% \DescribeMacro{latex.new_attribute}
% |latex.new_attribute(|\meta{attribute}|)|\\
% Returns an allocation number for the \meta{attribute}, indexed from~$1$.
% The attribute will be initialised with the marker value |-"7FFFFFFF|
% (`unset'). The attribute allocation sequence is shared with the \TeX{}
% code but this function does \emph{not} define a token using
% |\attributedef|.
%
% \noindent
% \DescribeMacro{latex.new_whatsit}
% |latex.new_whatsit(|\meta{whatsit}|)|\\
% Returns an allocation number for the custom \meta{whatsit}, indexed from~$1$.
%
% \section{Lua access to \TeX{} register numbers}
%
% \DescribeMacro{latex.registernumber}
% |latex.registernumer(|\meta{name}|)|\\
% Sometimes (notably in the case of Lua attributes) it is necessary to
% access a register \emph{by number} that has been allocated by \TeX{}.
% This package provides a function to look up the relevant number
% using Lua\TeX{}'s internal tables. So after for example
% |\newattribute\myattrib|, |\myattrib| would be defined by (say)
% |\myattrib=\attribute15|. The function call |latex.registernumer("myattrib")|
% will then return the register number, $15$ in this case. If the string passed
% as argument does not correspond to a token defined by |\attributedef|,
% |\countdef| or similar commands, the Lua value |false| is returned.
%
% As an example, consider the input:
%\begin{verbatim}
% \newcommand\test[1]{%
% \typeout{#1: \expandafter\meaning\csname#1\endcsname^^J
% \space\space\space\space
% \directlua{tex.write(latex.registernumber("#1") or "bad input")}%
% }}
%
% \test{undefinedrubbish}
%
% \test{space}
%
% \test{hbox}
%
% \test{@MM}
%
% \test{@tempdima}
% \test{@tempdimb}
%
% \test{strutbox}
%
% \test{sixt@@n}
%
% \attrbutedef\myattr=12
% \myattr=200
% \test{myattr}
%
%\end{verbatim}
%
% If the demonstration code is processed with Lua\LaTeX{} then the following
% would be produced in the log and terminal output.
%\begin{verbatim}
% undefinedrubbish: \relax
%      bad input
% space: macro:->
%      bad input
% hbox: \hbox
%      bad input
% @MM: \mathchar"4E20
%      20000
% @tempdima: \dimen14
%      14
% @tempdimb: \dimen15
%      15
% strutbox: \char"B
%      11
% sixt@@n: \char"10
%      16
% myattr: \attribute12
%      12
%\end{verbatim}
%
% Notice how undefined commands, or commands unrelated to registers
% do not produce an error, just return |false| and so print
% |bad input| here. Note also that commands defined by |\newbox| work and
% return the number of the box register even though the actual command
% holding this number is a |\chardef| defined token (there is no
% |\boxdef|).
%
% \subsection{Module utilities}
%
% \DescribeMacro{latex.provides_module}
% |latex.provides_module(|\meta{info}|)|\\
% This function is used by modules to identify themselves; the |info| should be
% a table containing information about the module. The required field
% |name| must contain the name of the module. It is recommended to provide a
% field |date| in the usual \LaTeX{} format |yyyy/mm/dd|. Optional fields
% |version| (a string) and |description| may be used if present. This
% information will be recorded in the log. Other fields are ignored.
%
% \noindent
% \DescribeMacro{latex.module_info}
% \DescribeMacro{latex.module_warning}
% \DescribeMacro{latex.module_error}
% |latex.module_info(|\meta{module}, \meta{text}|)|\\
% |latex.module_warning(|\meta{module}, \meta{text}|)|\\
% |latex.module_error(|\meta{module}, \meta{text}|)|\\
% These functions are similar to \LaTeX{}'s |\PackageError|, |\PackageWarning|
% and |\PackageInfo| in the way they format the output.  No automatic line
% breaking is done, you may still use |\n| as usual for that, and the name of
% the package will be prepended to each output line.
%
% Note that |latex.module_error| raises an actual Lua error with |error()|,
% which currently means a call stack will be dumped. While this may not
% look pretty, at least it provides useful information for tracking the
% error down.
%
% \subsection{Callback management}
%
% \DescribeMacro{latex.add_to_callback}
% |latex.add_to_callback(|^^A
% \meta{callback}, \meta{function}, \meta{description}|)|
% Registers the \meta{function} into the \meta{callback} with a textual
% \meta{description} of the function. Functions are inserted into the callback
% in the order loaded.
%
% \DescribeMacro{latex.remove_from_callback}
% |latex.remove_from_callback(|\meta{callback}, \meta{description}|)|
% Removes the function with \meta{description} from the \meta{callback}.
%
% \DescribeMacro{latex.added_to_callback}
% |latex.added_to_callback(|\meta{callback}, \meta{description}|)|
% Checks if the \meta{description} matches one of the functions added
% to the list for the \meta{callback}, returning a boolean value.
%
% \DescribeMacro{latex.disable_callback}
% |latex.disable_callback(|\meta{callback}|)|
% Sets the \meta{callback} to \texttt{false} as described in the Lua\TeX{}
% manual for the underlying \texttt{callback.register} built-in. Callbacks
% will only be set to false (and thus be skipped entirely) if there are
% no functions registered using the callback.
%
% \endgroup
%
% \StopEventually{}
%
% \section{Implementation}
%
% \subsection{Fix-ups}
%
%    \begin{macrocode}
%<*2ekernel>
%    \end{macrocode}
%
% The code below depends on some changes that may be made elsewhere in
% the kernel. Rather than intermix things, any suggested alterations
% are collected here. Note that this section will therefore be removed
% before addition to the kernel.
%
% The current thinking is to enable the additional Lua\TeX{} primitives
% with unadorned names. That will be implemented in |ltdirchk.dtx| if
% finally agreed.
%    \begin{macrocode}
\directlua{
  tex.enableprimitives(
    "",
    tex.extraprimitives("omega", "aleph", "luatex")
  )
}
%    \end{macrocode}
%
% \subsection{Minimum Lua\TeX{} version}
%
% Lua\TeX{} has changed a lot over time. In the kernel support for ancient
% versions is not provided: trying to build a format with a very old binary
% therefore gives some information in the log and loading stops. The cut-off
% selected here relates to the tree-searching behaviour of |require()|:
% from version~0.60, Lua\TeX{} will correctly find Lua files in the |texmf|
% tree without `help'.
%    \begin{macrocode}
\ifnum\luatexversion<60 %
  \wlog{***************************************************}
  \wlog{* LuaTeX version too old for kernel-level support *}
  \wlog{***************************************************}
  \expandafter\endinput
\fi
%    \end{macrocode}
%
% \subsection{Attributes}
%
% \begin{macro}{\newattribute}
% \changes{v1.0a}{0000/00/00}{Macro added}
%   As is generally the case for the Lua\TeX{} registers we start here
%   from~$1$. Notably, some code assumes that |\attribute0| is never used so
%   this is important in this case.
%    \begin{macrocode}
\def\newattribute#1{%
  \e@alloc\attribute\attributedef
    {\count258}\m@ne\e@alloc@top#1%
}
\count258=\z@
%    \end{macrocode}
% \end{macro}
%
% \subsection{Category code tables}
%
% \begin{macro}{\newcatcodetable}
% \changes{v1.0a}{0000/00/00}{Macro added}
%   Category code tables are allocated with a limit half of that used by Lua\TeX{}
%   for everything else. At the end of allocation there needs to be an
%   initialisation step. Table~$0$ is already taken (it's the global one for
%   current use) so the allocation starts at~$1$.
%    \begin{macrocode}
\def\newcatcodetable#1{%
  \e@alloc\catcodetable\chardef
    {\count259}\m@ne{"8000}#1%
  \initcatcodetable\allocationnumber
}
\count259=\z@
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\catcodetable@initex}
% \changes{v1.0a}{0000/00/00}{Macro added}
% \begin{macro}{\catcodetable@string}
% \changes{v1.0a}{0000/00/00}{Macro added}
% \begin{macro}{\catcodetable@latex}
% \changes{v1.0a}{0000/00/00}{Macro added}
% \begin{macro}{\catcodetable@atletter}
% \changes{v1.0a}{0000/00/00}{Macro added}
%   Save a small set of standard tables.
%    \begin{macrocode}
\newcatcodetable\catcodetable@initex
\newcatcodetable\catcodetable@string
\begingroup
  \def\setrangecatcode#1#2#3{%
    \ifnum#1>#2 %
      \expandafter\@gobble
    \else
      \expandafter\@firstofone
    \fi
      {%
        \catcode#1=#3 %
        \expandafter\setrangecatcode\expandafter
          {\number\numexpr#1 + 1\relax}{#2}{#3}
      }%
  }
  \@firstofone{%
    \catcodetable\catcodetable@initex
      \catcode0 =12 %
      \catcode12=12 %
      \catcode37=12 %
      \setrangecatcode{65}{90}{12}%
      \setrangecatcode{97}{122}{12}%
      \catcode92= 12 %
      \catcode127=12 %
      \savecatcodetable\catcodetable@string
    \endgroup
  }%
\newcatcodetable\catcodetable@latex
\begingroup
  \@firstofone{%
    \makeatother
    \savecatcodetable\catcodetable@latex
   }
\endgroup
\newcatcodetable\catcodetable@atletter
\savecatcodetable\catcodetable@atletter
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \subsection{Named Lua functions}
%
% \begin{macro}{\newluafunction}
% \changes{v1.0a}{0000/00/00}{Macro added}
%   Much the same story for allocating Lua\TeX{} functions except here they are
%   just numbers so are allocated in the same way as boxes. Lua index from~$1$
%   so once again slot ~$0$ is skipped.
%    \begin{macrocode}
\def\newluafunction{%
  \e@alloc\luafunction\e@alloc@chardef
    {\count260}\m@ne\e@alloc@top
}
\count260=\z@
%    \end{macrocode}
% \end{macro}
%
% \subsection{Custom whatsits}
%
% \begin{macro}{\newwhatsit}
% \changes{v1.0a}{0000/00/00}{Macro added}
%   These are only settable from Lua but for consistency are definable
%   here.
%    \begin{macrocode}
\def\newwhatsit#1{%
  \e@alloc\whatsit\e@alloc@chardef
    {\count261}\m@ne\e@alloc@top#1%
}
\count261=\z@
%    \end{macrocode}
% \end{macro}
%
% \subsection{Lua loader}
%
% Load the Lua code at the start of every job.
% For the conversion of \TeX{} into numbers at the Lua side we need some
% known registers: for convenience we use a set of systematic names, which
% means using a group around the Lua loader.
%    \begin{macrocode}
%%\everyjob\expandafter{%
%%  \the\everyjob
%% Whilst in testing, load at every run.
  \begingroup
    \attributedef\attributezero=0 %
    \chardef     \charzero     =0 %
    \countdef    \countzero    =0 %
    \dimendef    \dimenzero    =0 %
    \mathchardef \mathcharzero =0 %
    \muskipdef   \muskipzero   =0 %
    \skipdef     \skipzero     =0 %
    \toksdef     \tokszero     =0 %
    \directlua{require("latex2e")}
  \endgroup
%%}
%    \end{macrocode}
%
%    \begin{macrocode}
%</2ekernel>
%    \end{macrocode}
%
% \subsection{Lua module preliminaries}
%
% \begingroup
%
%  \begingroup\lccode`~=`_
%  \lowercase{\endgroup\let~}_
%  \catcode`_=12
%
%    \begin{macrocode}
%<*2elua>
%    \end{macrocode}
%
% Some set up for the Lua module which is needed for all of the Lua
% functionality added here.
%
% \begin{macro}{latex}
% \changes{v1.0a}{0000/00/00}{Table added}
%   Set up the table for the returned functions. This is used to expose
%   all of the public functions.
%    \begin{macrocode}
latex       = latex or { }
local latex = latex
%    \end{macrocode}
% \end{macro}
%
% Some Lua best practice: use local versions of functions where possible.
%    \begin{macrocode}
local string_gsub      = string.gsub
local tex_count        = tex.count
local tex_setattribute = tex.setattribute
local tex_setcount     = tex.setcount
local texio_write_nl   = texio.write_nl
%    \end{macrocode}
%
% \subsection{Lua module utilities}
%
% \subsubsection{Module tracking}
%
% \begin{macro}{latex.modules}
% \changes{v1.0a}{0000/00/00}{Function modified}
%   To allow tracking of module usage, a structure is provided to store
%   information and to return it.
%    \begin{macrocode}
local modules = modules or { }
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{latex.provides_module}
% \changes{v1.0a}{0000/00/00}{Function added}
%   Modelled on |\ProvidesPackage|, we store much the same information but
%   with a little more structure.
%    \begin{macrocode}
local function provides_module(info)
  if not (info and info.name) then
    latex_error("Missing module name for provides_modules")
    return
  end
  local function spaced(text)
    return text and (" " .. text) or ""
  end
  texio_write_nl(
    "log",
    "Lua module: " .. info.name
      .. spaced(info.date)
      .. spaced(info.version)
      .. spaced(info.description)
  )
  modules[info.name] = info
end
latex.provides_module = provides_module
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Module messages}
%
% There are various warnings and errors that need to be given. For warnings
% we can get exactly the same formatting as from \TeX{}. For errors we have to
% make some changes. Here we give the text of the error in the \LaTeX{} format
% then force an error from Lua to halt the run. Splitting the message text is
% done using |\n| which takes the place of |\MessageBreak|.
%
% First an auxiliary for the formatting: this measures up the message
% leader so we always get the correct indent.
%    \begin{macrocode}
local function msg_format(mod, msg_type, text)
  local leader = ""
  if type == "Error" then
    leader = "! "
  end
  local cont
  if mod == "LaTeX" then
    cont = string_gsub(leader, ".", " ")
    leader = leader .. "LaTeX: "
  else
    cont = "(" .. mod .. ")"
      .. string_gsub(first_head .. "Module: " .. ms_type, ".", " ")
    first_head = leader .. "Module " .. mod .. " " .. type .. ": "
  end
  return leader .. " "
    .. string_gsub(
         text .. " on input line "
         .. tex.inputlineno, "\n", "\n" .. cont .. " "
      )
   .. "\n"
end
%    \end{macrocode}
%
% \begin{macro}{latex.module_info}
% \changes{v1.0a}{0000/00/00}{Function added}
% \begin{macro}{latex.module_warning}
% \changes{v1.0a}{0000/00/00}{Function added}
% \begin{macro}{latex.module_error}
% \changes{v1.0a}{0000/00/00}{Function added}
%   Write messages.
%    \begin{macrocode}
local function module_info(mod, text)
  local i
  for _,i in ipairs(msg_format(mod, "Info", text):explode("\n")) do
    texio_write_nl("log", i)
  end
end
latex.module_info = module_info
local function module_warning(mod, text)
  local i
  for _,i in ipairs(msg_format(mod, "Warning", text):explode("\n")) do
    texio_write_nl("term and log", i)
  end
end
latex.module_warning = module_warning
local function module_error(mod, text)
  local i
  for _,i in ipairs(msg_format(mod, "Error", text):explode("\n")) do
    texio_write_nl("term and log", i)
  end
  texio_write_nl("term and log", "\n")
  error("See " .. mod .. " Error")
end
latex.module_error = module_error
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% Dedicated versions for the rest of the code here.
%    \begin{macrocode}
local function latex_warning(text)
  module_warning("LaTeX", text)
end
local function latex_error(text)
  module_error("LaTeX", text)
end
%    \end{macrocode}
%
% \subsection{Attribute allocation}
%
% \begin{macro}{latex.new_attribute}
% \changes{v1.0a}{0000/00/00}{Function added}
%   As attributes are used for Lua manipulations its useful to be able
%   to assign from this end.
%    \begin{macrocode}
local function new_attribute(name)
  tex_setcount("global", 258, tex_count[258] + 1)
  if tex_count[258] > 65534 then
    latex_error("No room for a new \\attribute")
    return -1
  end
  texio_write_nl("Lua-only attribute " .. name .. " = " .. tex_count[258])
  return tex_count[258]
end
latex.new_attribute = new_attribute
%    \end{macrocode}
% \end{macro}
%
% \subsection{Custom whatsit allocation}
%
% \begin{macro}{latex.new_whatsit}
% Much the same as for attribute allocation in Lua
%    \begin{macrocode}
local function new_whatsit(name)
  tex_setcount("global", 261, tex_count[261] + 1)
  if tex_count[261] > 65534 then
    latex_error("No room for a new custom whatsit")
    return -1
  end
  texio_write_nl("Custom whatsit " .. name .. " = " .. tex_count[261])
  return tex_count[261]
end
latex.new_whatsit = new_whatsit
%    \end{macrocode}
% \end{macro}
%
% \subsection{Accessing register numbers from Lua}
%
% Collect up the data from the \TeX{} level into a Lua table: from
% version~0.80, Lua\TeX{} makes that easy.
%    \begin{macrocode}
local luaregisterbasetable = { }
local registermap = {
  attributezero = "assign_attr"    ,
  charzero      = "char_given"     ,
  countzero     = "assign_int"     ,
  dimenzero     = "assign_dimen"   ,
  mathcharzero  = "math_given"     ,
  muskipzero    = "assign_mu_skip" ,
  skipzero      = "assign_skip"    ,
  tokszero      = "assign_toks"    ,
}
local i, j
local createtoken   = newtoken.create
local hashtokens    = tex.hashtokens
local luatexversion = tex.luatexversion
for i,j in pairs (registermap) do
  if luatexversion < 80 then
    luaregisterbasetable[hashtokens()[i][1]] =
      hashtokens()[i][2]
  else
    luaregisterbasetable[j] = createtoken(i).mode
  end
end
%    \end{macrocode}
%
% \begin{macro}{latex.registernumber}
%   Working out the correct return value can be done in two ways. For older
%   Lua\TeX{} releases it has to be extracted from the |hashtokens|. On the
%   other hand, newer Lua\TeX{}'s have |newtoken|, and whilst |.mode| isn't
%   currently documented, Hans Hagen pointed to this approach so we should be
%   OK.
%    \begin{macrocode}
local registernumber
if luatexversion < 80 then
  function registernumber(name)
    local nt = hashtokens()[name]
    if(nt and luaregisterbasetable[nt[1]]) then
      return nt[2] - luaregisterbasetable[nt[1]]
    else
      return false
    end
  end
else
  function registernumber(name)
    local nt = createtoken(name)
    if(luaregisterbasetable[nt.cmdname]) then
      return nt.mode - luaregisterbasetable[nt.cmdname]
    else
      return false
    end
  end
end
latex.registernumber = registernumber
%    \end{macrocode}
% \end{macro}
%
% \subsection{Lua callback management}
%
% The native mechanism for callbacks in Lua allows only one per function.
% That is extremely restrictive and so a mechanism is needed to add and
% remove callbacks from the appropriate hooks.
%
% \subsubsection{Housekeeping}
%
% The main table: keys are callback names, and values are the associated lists
% of functions. More precisely, the entries in the list are tables holding the
% actual function as |func| and the identifying description as |description|.
% Only callbacks with a non-empty list of functions have an entry in this
% list.
%    \begin{macrocode}
local callbacklist = callbacklist or { }
%    \end{macrocode}
%
% Numerical codes for callback types, and name-to-value association (the
% table keys are strings, the values are numbers).
%    \begin{macrocode}
local list, data, exclusive, simple = 1, 2, 3, 4
local types = {
  list      = list,
  data      = data,
  exclusive = exclusive,
  simple    = simple,
}
%    \end{macrocode}
%
% Now, list all predefined callbacks with their current type, based on the
% Lua\TeX{} manual version~0.80. A full list of the currently-available
% callbacks can be obtained using
%  \begin{verbatim}
%    \directlua{
%      for i,_ in pairs(callback.list()) do
%        texio.write_nl("- " .. i)
%      end
%    }
%    \bye
%  \end{verbatim}
% in plain Lua\TeX{}. (Some undocumented callbacks are omitted as they are
% to be removed.)
%    \begin{macrocode}
local callbacktypes = callbacktypes or {
%    \end{macrocode}
%   Section 4.1.1: file discovery callbacks.
%    \begin{macrocode}
  find_read_file     = exclusive,
  find_write_file    = exclusive,
  find_font_file     = data,
  find_output_file   = data,
  find_format_file   = data,
  find_vf_file       = data,
  find_map_file      = data,
  find_enc_file      = data,
  find_sfd_file      = data,
  find_pk_file       = data,
  find_data_file     = data,
  find_opentype_file = data,
  find_truetype_file = data,
  find_type1_file    = data,
  find_image_file    = data,
%    \end{macrocode}
% Section 4.1.2: file reading callbacks.
%    \begin{macrocode}
  open_read_file     = exclusive,
  read_font_file     = exclusive,
  read_vf_file       = exclusive,
  read_map_file      = exclusive,
  read_enc_file      = exclusive,
  read_sfd_file      = exclusive,
  read_pk_file       = exclusive,
  read_data_file     = exclusive,
  read_truetype_file = exclusive,
  read_type1_file    = exclusive,
  read_opentype_file = exclusive,
%    \end{macrocode}
% Section 4.1.3: data processing callbacks.
%    \begin{macrocode}
  process_input_buffer  = data,
  process_output_buffer = data,
  process_jobname       = data,
  token_filter          = exclusive,
%    \end{macrocode}
% Section 4.1.4: node list processing callbacks.
%    \begin{macrocode}
  buildpage_filter      = simple,
  pre_linebreak_filter  = list,
  linebreak_filter      = list,
  post_linebreak_filter = list,
  hpack_filter          = list,
  vpack_filter          = list,
  pre_output_filter     = list,
  hyphenate             = simple,
  ligaturing            = simple,
  kerning               = simple,
  mlist_to_hlist        = list,
%    \end{macrocode}
% Section 4.1.5: information reporting callbacks.
%    \begin{macrocode}
  pre_dump            = simple,
  start_run           = simple,
  stop_run            = simple,
  start_page_number   = simple,
  stop_page_number    = simple,
  show_error_hook     = simple,
  show_error_message  = simple,
  show_lua_error_hook = simple,
  start_file          = simple,
  stop_file           = simple,
%    \end{macrocode}
% Section 4.1.6: PDF-related callbacks.
%    \begin{macrocode}
  finish_pdffile = data,
  finish_pdfpage = data,
%    \end{macrocode}
% Section 4.1.7: font-related callbacks.
%    \begin{macrocode}
  define_font = exclusive,
%    \end{macrocode}
% Undocumented callbacks which are likely to get documented.
%    \begin{macrocode}
  find_cidmap_file           = data,
  pdf_stream_filter_callback = data,
}
%    \end{macrocode}
%
% \begin{macro}{callback.register}
% \changes{v1.0a}{0000/00/00}{Function modified}
%   Save the original function for registering callbacks and prevent the
%   original being used. The original is saved in a place that remains
%   available so other more sophisticated code can override the approach
%   taken by the kernel if desired.
%    \begin{macrocode}
local callback_register = callback_register or callback.register
function callback.register()
  latex_error("Attempt to use callback.register() directly.")
end
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Handlers}
%
% The handler function is registered into the callback when the
% first function is added to this callback's list. Then, when the callback
% is called, then handler takes care of running all functions in the list.
% When the last function is removed from the callback's list, the handler
% is unregistered.
%
% More precisely, the functions below are used to generate a specialized
% function (closure) for a given callback, which is the actual handler.
%
% Handler for |data| callbacks.
%    \begin{macrocode}
local function data_handler(name)
  return function(data, ...)
    local i
    for _,i in ipairs(callbacklist[name]) do
      data = i.func(data)
    end
    return data
  end
end
%    \end{macrocode}
% Handler for |exclusive| callbacks. We can assume |callbacklist[name]| is not
% empty: otherwise, the function wouldn't be registered in the callback any
% more.
%    \begin{macrocode}
local function exclusive_handler(name)
  return function(...)
    return callbacklist[name][1].func(...)
  end
end
%    \end{macrocode}
% Handler for |list| callbacks.
%    \begin{macrocode}
local function list_handler(name)
  return function(head, ...)
    local ret
    local alltrue = true
    local i
    for _,i in ipairs(callbacklist[name]) do
      ret = i.func(head, ...)
      if ret == false then
        latex_warning(
          "Function `i.description' returned false\n"
            .. "in callback `name'"
         )
         break
      end
      if ret ~= true then
        alltrue = false
        head = ret
      end
    end
    return alltrue and true or head
  end
end
%    \end{macrocode}
% Handler for |simple| callbacks.
%    \begin{macrocode}
local function simple_handler(name)
  return function(...)
    local i
    for _,i in ipairs(callbacklist[name]) do
      i.func(...)
    end
  end
end
%    \end{macrocode}
%
% Keep a handlers table for indexed access.
%    \begin{macrocode}
local handlers = {
  [data]      = data_handler,
  [exclusive] = exclusive_handler,
  [list]      = list_handler,
  [simple]    = simple_handler,
}
%    \end{macrocode}
%
% \subsubsection{Public functions for callback management}
%
% \begin{macro}{latex.add_to_callback}
% \changes{v1.0a}{0000/00/00}{Function added}
%   Add a function to a callback. First check arguments.
%    \begin{macrocode}
local function add_to_callback(name, func, description)
  if
    not name or
    name == "" or
    not callbacktypes[name] or
    type(func) ~= "function" or
    not description or
    description == "" then
    latex_error(
      "Unable to register callback.\n\n"
        .. "Correct usage:\n"
        .. "add_to_callback(<callback>, <function>, <description>)"
    )
    return
  end
%    \end{macrocode}
%   Then test if this callback is already in use. If not, initialise its list
%   and register the proper handler.
%    \begin{macrocode}
  local l = callbacklist[name]
  if not l then
    l = { }
    callbacklist[name] = l
    callback_register(name, handlers[callbacktypes[name]](name))
  end
%    \end{macrocode}
%  Actually register the function and give an error if more than one
%  |exclusive| one is registered.
%    \begin{macrocode}
  local f = {
    func        = func,
    description = description,
  }
  local priority = #l + 1
  if callbacktypes[name] == exclusive then
    if #l == 1 then
      latex_error(
        "Cannot add second callback to exclusive function `" .. name .. "'."
      )
    end
  end
  table.insert(l, priority, f)
%    \end{macrocode}
%  Keep user informed.
%    \begin{macrocode}
  texio_write_nl(
    "Inserting `" .. description .. "' at position "
      .. priority .. " in `" .. name .. "'."
  )
end
latex.add_to_callback = add_to_callback
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{latex.remove_from_callback}
% \changes{v1.0a}{0000/00/00}{Function added}
%   Remove a function from a callback. First check arguments.
%    \begin{macrocode}
local function remove_from_callback(name, description)
  if
    not name or
    name == "" or
    not callbacktypes[name] or
    not description or
    description == "" then
    latex_error(
      "Unable to remove function from callback.\n\n"
        .. "Correct usage:\n"
        .. "remove_to_callback(<callback>, <description>)"
    )
    return
  end
  local l = callbacklist[name]
  if not l then
    latex_error("No callback list for `" .. name .. "'.")
  end
%    \end{macrocode}
%  Loop over the callback's function list until we find a matching entry.
%  Remove it and check if the list is empty: if so, unregister the
%   callback handler.
%    \begin{macrocode}
  local index = false
  local i,j
  for i,j in ipairs(l) do
    if j.description == description then
      index = i
      break
    end
  end
  if not index then
    latex_error(
      "No callback `" .. description .. "' registered for `" .. name .. "'."
    )
    return
  end
  table.remove(l, index)
  texio_write_nl(
    "Removing  `" .. description .. "' from `" .. name .. "'."
  )
  if #l == 0 then
    callbacklist[name] = nil
    callback_register(name, nil)
  end
end
latex.remove_from_callback = remove_from_callback
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{latex.added_to_callback}
% \changes{v1.0a}{0000/00/00}{Function added}
%   Look for a function description in a callback.
%    \begin{macrocode}
local function added_to_callback(name, description)
  if not name
    or name == ""
    or not callbacktypes[name]
    or not description then
      return false
  end
  local i
  for _, i in pairs(callbacklist[name]) do
    if i.description == description then
      return true
    end
  end
  return false
end
latex.added_to_callback = added_to_callback
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{latex.disable_callback}
% \changes{v1.0a}{0000/00/00}{Function added}
%   As we subvert the engine interface we need to provide a way to access
%   this functionality.
%    \begin{macrocode}
local function disable_callback(name)
  if(callbacklist[name] == nil) then
    callback_register(name, false)
  else
    latex_error("Callback list for " .. name .. " not empty")
  end
end
latex.disable_callback = disable_callback
%    \end{macrocode}
% \end{macro}
%
% \endgroup
%
%    \begin{macrocode}
%</2elua>
%    \end{macrocode}
%
% \Finale
