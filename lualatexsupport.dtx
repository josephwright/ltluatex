% \iffalse meta-comment
%
% Copyright (C) 2015 David Carlisle and Joseph Wright
%
% It may be distributed and/or modified under the conditions of
% the LaTeX Project Public License (LPPL), either version 1.3c of
% this license or (at your option) any later version.  The latest
% version of this license is in the file:
%
%   http://www.latex-project.org/lppl.txt
%
% \fi
% \iffalse
%<*package>
\ProvidesPackage{lualatexsupport}
%</package>
%<*!lua>
% \fi
% \ProvidesFile{lualatexsupport.dtx}
  [0000/00/00 v1.0 LuaTeX support add-ons for modern LaTeX2e kernels]
% \iffalse
%</!lua>
%<*driver>
% At present the kernel hasn't changed so we need
\ifx\directlua\undefined\else
  \RequirePackage{ltluatex}
  \directlua{require("latex2e")}
\fi
\documentclass{ltxdoc}
\usepackage{lualatexsupport}
\begin{document}
\DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{lualatexsupport.dtx}
%
% \title{\filename\\(Lua\TeX{}-specific support)\thanks{This file has
%   version number \fileversion, last revised \filedate.}}
% \author{David Carlisle and Joseph Wright\footnote{Portions
%  of the code here are adapted/simplified from the packages \textsf{luatex}
%  and \textsf{luatexbase} written by Heiko Oberdiek, \'{E}lie Roux,
%  Manuel P\'{e}gouri\'{e}-Gonnar and Philipp Gesang.}}
% \date{\filedate}
%
% \maketitle
%
% \CheckSum{0}
%
% \section{Attribute setting}
%
% \DescribeMacro{\setattribute}
% \DescribeMacro{\unsetattribute}
% |\setattribute{|\meta{attribute}|}{|\meta{value}|}|\\
% |\unsetattribute{|\meta{attribute}|}|\\
% Set and unset attributes in a manner analogous to |\setlength|. Note that
% attributes take a marker value when unset so this operation is distinct
% from setting the value to zero.
%
% \section{Category code table support}
%
% \DescribeMacro{\setcatcodetable}
% |\setcatcodetable{|\meta{table}|}{|\meta{catcodes}|}|\\
% Sets the \meta{table} (which must have been previously defined) to
% apply the \meta{catcodes} specified.
%
% \DescribeMacro{\setrangecatcode}
% |\setrangecatcode{|\meta{start}|}{|\meta{end}|}{|\meta{catcode}|}|\\
% Sets all characters in the range \meta{start}--\meta{end} inclusive to
% have the \meta{catcode} specified.
%
% \DescribeMacro{\pushcatcodes}
% \DescribeMacro{\popcatcodes}
% |\pushcatcodes|\\
% |\popcatcodes|\\
% This pair of commands enable the current category code r\'{e}gime to
% be saved and restored meaning that arbitrary catcode changes can be made.
% This functionality will normally be used in concert with applying
% catcode tables. For example
% \begin{verbatim}
% \catcode`\Z=4 %
% \pushcatcodes
% \expandafter\catcodetable\csname catcodetable@latex\endcsname
% % Code here
% \popcatcodes
% \showthe\catcode`\Z
% \end{verbatim}
% will ensure that the `content' is set with normal category codes but
% allow restoration of the non-standard codes at the conclusion. Importantly,
% it does not require that anything is known about the catcode situation in
% advance (\emph{cf.}~a more traditional approach to saving the state of
% targeting characters).
%
% \StopEventually{}
%
% \section{Implementation}
%
% \subsection{Preliminaries}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% Obviously we need Lua\TeX{} so simply stop if that is not in use.
%    \begin{macrocode}
\ifx\directlua\@undefined
  \PackageInfo{luatexsupport}
    {LuaTeX not in use: package loading aborted.}
  \expandafter\endinput
\fi
%    \end{macrocode}
% Next, check that both the kernel a new enough.
%    \begin{macrocode}
\ifx\newluafunction\@undefined
  \PackageInfo{luatexsupport}
    {Kernel support unavailable: kernel too old.}
  \expandafter\endinput
\fi
\ifnum\luatexversion<60 %
  \PackageInfo{luatexsupport}
    {Kernel support unavailable: LuaTeX too old.}
  \expandafter\endinput
\fi
%    \end{macrocode}
%
% \subsection{Attributes}
%
% \begin{macro}{\setattribute}
% \begin{macro}{\unsetattribute}
%   Handy utilities.
%    \begin{macrocode}
\newcommand*\setattribute[2]{#1=\numexpr#2\relax}
\newcommand*\unsetattribute[1]{#1=-"7FFFFFFF\relax}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \subsection{Category code tables}
%
% \begin{macro}{\setcatcodetable}
% \begin{macro}{\setrangecatcode}
%   Handy utilities.
%    \begin{macrocode}
\newcommand*\setcatcodetable[2]{%
  \begingroup
    #2%
    \savecatcodetable#1%
  \endgroup
}
\newcommand*\setrangecatcode[3]{%
  \ifnum#1>#2 %
    \expandafter\@gobble
  \else
    \expandafter\@firstofone
  \fi
    {%
      \catcode#1=#3 %
      \expandafter\setrangecatcode\expandafter
        {\number\numexpr#1+1\relax}{#2}{#3}%
    }%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@catcodetablelist}
% \begin{macro}{\@catcodetablestack}
%   Data structures for a stack: a list of free tables in the stack and
%   the stack record itself.
%    \begin{macrocode}
\newcommand*\@catcodetablelist{}
\newcommand*\@catcodetablestack{}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\@catcodetablestackcnt}
%   A count for adding to the list of scratch tables.
%    \begin{macrocode}
\newcount\@catcodetablestackcnt
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\pushcatcodes}
% \begin{macro}{\@pushctbl}
%   To push a table, first check there is a free one in the pool and if
%   not create one. Then take the top table in the pool and use it to save
%   the current table.
%    \begin{macrocode}
\newcommand*\pushcatcodes{%
  \ifx\@catcodetablelist\@empty
    \global\advance\@catcodetablestackcnt by\@ne
    \edef\@tempa{\@nameuse{ct@\the\@catcodetablestackcnt}}%
    \expandafter\newcatcodetable\@tempa
    \xdef\@catcodetablelist{\@tempa}%
  \fi
  \expandafter\@pushctbl\@catcodetablelist\@nil
}
\def\@pushctbl#1#2\@nil{%
  \gdef\@catcodetablelist{#2}%
  \xdef\@catcodetablestack{#1\@catcodetablestack}%
  \savecatcodetable#1%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\popcatcodes}
% \begin{macro}{\@popctbl}
%   Much the same in reverse.
%    \begin{macrocode}
\newcommand*\popcatcodes{%
  \ifx\@catcodetablestack\@empty
    \PackageError{lualatexsupport}
      {Attempt to pop empty catcodetable stack}\@ehc
  \fi
  \expandafter\@popctbl\@catcodetablestack\@nil
}
\def\@popctbl#1#2\@nil{%
  \gdef\@catcodetablestack{#2}%
  \xdef\@catcodetablelist{\@catcodetablelist#1}%
  \catcodetable#1%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
%
% \Finale